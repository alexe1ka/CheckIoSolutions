# Даны длины сторон треугольника и необходимо найти углы треугольника.
# Если невозможно сформировать треугольник из данных сторон (или для вырожденного треугольника),
# тогда результатом должны быть все нули. Результат должен быть представлен,
# как список (list) целых чисел в возрастающем порядке.
# Углы должны быть записаны в градусах и округляются до целого числа (стандартное округление).
#
# Входные данные: Длины сторон треугольник, как целые числа (int).
#
# Выходные данные: Углы данного треугольника в градусах, как сортированный список (list) целых чисел (int).
#
# Предусловия:
# 0 < a,b,c ≤ 1000


def checkio(a, b, c):
    # replace this for solution
    return [0, 0, 0]


# These "asserts" using only for self-checking and not necessary for auto-testing
if __name__ == '__main__':
    assert checkio(4, 4, 4) == [60, 60, 60], "All sides are equal"
    assert checkio(3, 4, 5) == [37, 53, 90], "Egyptian triangle"
    assert checkio(2, 2, 5) == [0, 0, 0], "It's can not be a triangle"
